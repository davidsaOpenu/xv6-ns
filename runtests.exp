#!/usr/bin/expect -f

# no limit - usertests are time consuming
set timeout -1

# dry-run to get qemu command - to end qemu with close afterwards
spawn bash -c "make -n qemu-nox | grep qemu"
expect eof
set qemu_command $expect_out(buffer)

# TODO: use the resut of dry run as an agument fot spawn ($expect_out(buffer) is not working for some reason)
# actual run
spawn qemu-system-i386 -nographic -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp 2 -m 512
expect "$ "

#uncomment for expect debugging
#exp_internal 1

#run container tests---------------------------------------------------

#..............................ioctl test:
send "x6xc_tests\n"
expect {
   "IOCTL TESTS PASS"
}

#..............................pouch start test:

send "pouch start m &\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m starting"
}

send "pid\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "PID: 2"
}

send "pouch distroy m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m distorying"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Console connected"
}

set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Exiting container"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "zombie!"
}


#..............................pouch connect test:

send "pouch start m &\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m starting"
}

send "pouch connect m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m connecting"
}

set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "tty0 connected" {
   		exp_continue
   }
   "CONT TTY NOT FOUND" {
   		send "pouch connect m\n"
   		log_file -noappend [lindex $argv 0]
   		expect {
   			"tty1 connected"
   		}
   		exp_continue
   }
}

send "pid\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "PID: 1"
}

send "pouch distroy m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "cannot destroy container while connected to it"
}

set timeout 1
send "disconnect\n"
log_file -noappend [lindex $argv 0]
expect {
   "Console connected"
}

send "pid\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "PID: 2"
}

send "pouch distroy m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m distorying"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Console connected"
}

set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Exiting container"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "zombie!"
}


#..............................pouch disconnect test:

send "pouch start m &\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m starting"
}

send "pouch connect m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m connecting"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "tty0 connected" {
   		exp_continue
   }
   "CONT TTY NOT FOUND" {
   		send "pouch connect m\n"
   		log_file -noappend [lindex $argv 0]
   		expect {
   			"tty1 connected"
   		}
   		exp_continue
   }
}

send "pouch disconnect m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m disconnecting"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Console connected"
}

send "pid\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "PID: 2"
}

#..............................pouch destroy test:

send "pouch start m &\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m starting"
}
set timeout 1
send "ls cont_m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "cont_m         2 31 40" {
   		exp_continue
   }
   "cont_m         2 33 40" {
   		exp_continue
   }
}

send "pouch distroy m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Console connected"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "Exiting container"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "zombie!"
}

send "ls cont_m\n"
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "ls: cannot open cont_m"
}

#..............................to many containers test

send "pouch start m &\n"
log_file -noappend [lindex $argv 0]
set timeout 3
expect {
   "Pouch container - cont_m starting" 
}
log_file -noappend [lindex $argv 0]
set timeout 1
expect {
   "Cannot find tty"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "zombie!"
}

send "pouch start m1 &\n"
set timeout 3
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m1 starting"
}
log_file -noappend [lindex $argv 0]
set timeout 1
expect {
   "Cannot find tty"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "zombie!"
}

send "pouch start m2 &\n"
set timeout 3
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m2 starting"
}
log_file -noappend [lindex $argv 0]
set timeout 1
expect {
   "Cannot find tty"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "zombie!"
}

send "pouch start m3 &\n"
set timeout 3
log_file -noappend [lindex $argv 0]
expect {
   "Pouch container - cont_m3 starting"
}
log_file -noappend [lindex $argv 0]
set timeout 1
expect {
   "Cannot find tty"
}
set timeout 1
log_file -noappend [lindex $argv 0]
expect {
   "zombie!"
}


# run usertests and log the output-------------------------------

set timeout 5
set timeout -1
send "usertests\n"
log_file -noappend [lindex $argv 0]
expect {
   "$ "
}
log_file

# just in case
close

# jenkins will check if lines=$(grep "ALL TESTS PASSED" mylog.txt | wc -l)
# -eq 1 (aka SUCCESS, FAILURE otherwise).
